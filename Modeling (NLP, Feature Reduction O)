{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Modeling (NLP, Feature Reduction O)","provenance":[],"collapsed_sections":[],"machine_shape":"hm","authorship_tag":"ABX9TyMLRG+mZPB1I2R08XVrFjre"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["## **nlp 결과 값 추가 (2000/01 ~ 2022/03)**"],"metadata":{"id":"k07NFudPEybL"}},{"cell_type":"code","source":["from google.colab import drive\n","\n","drive.mount('/content/drive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"noCrvUeYGrdM","executionInfo":{"status":"ok","timestamp":1655081515520,"user_tz":-540,"elapsed":18873,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"186f3533-f301-45e6-d75f-af9ef64ca1f6"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import os\n","import numpy as np\n","import pandas as pd\n","\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn import metrics\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import accuracy_score, roc_auc_score, roc_curve\n","from yellowbrick.classifier import ROCAUC\n","import statsmodels.api as sm\n","import matplotlib.pyplot as plt \n","import seaborn as sns\n","import itertools\n","import time\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_OjASvRzGsHN","executionInfo":{"status":"ok","timestamp":1655081517049,"user_tz":-540,"elapsed":1533,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"b2330f93-fa7a-4a63-8807-62e034895820"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"]}]},{"cell_type":"code","source":["X =  pd.read_csv('/content/drive/My Drive/finbert/FRED.csv')\n","\n","Y = pd.read_csv('/content/drive/My Drive/finbert/S&P500.csv')\n","\n","\n","\n","feature_re =  pd.read_csv('/content/drive/My Drive/finbert/new_feature.csv')\n","\n","del X['sasdate']\n","\n","Y = Y['Result']\n","\n","X.rename(columns={'IPB51222S':'IPB51222s'},inplace=True)\n","\n","X = X.fillna(0)\n","\n","\n","# 변수 선택\n","\n","new_feature_name = feature_re['fred']\n","\n","X = X.loc[:,new_feature_name]"],"metadata":{"id":"w3XqnshNE9PX","executionInfo":{"status":"ok","timestamp":1654961121030,"user_tz":-540,"elapsed":1199,"user":{"displayName":"임경룡","userId":"01521213593003281639"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["## Logistic Regression"],"metadata":{"id":"lN0p2Nt5I-UA"}},{"cell_type":"code","source":["np.random.seed(777)\n","\n","#grid_search 이용\n","X_train = X.iloc[0:266,:]\n","Y_train = Y.iloc[0:266]\n","\n","from sklearn.model_selection import GridSearchCV\n","\n","param_grid = {\n","    'C' : [0.001, 0.01, 0.1, 1, 10, 100],\n","    'max_iter' : [1000,10000,20000]\n","}\n","\n","grid_search = GridSearchCV(LogisticRegression(), param_grid, cv=5)\n","\n","grid_search.fit(X_train, Y_train)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I6KkEoLOE9bO","executionInfo":{"status":"ok","timestamp":1654739103217,"user_tz":-540,"elapsed":57017,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"ead0c627-80b9-4f76-e039-e33b5f0f9f11"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"]},{"output_type":"stream","name":"stdout","text":["최적의 parameters :  {'C': 10, 'max_iter': 1000}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"]}]},{"cell_type":"code","source":["print('최적의 parameters : ', grid_search.best_params_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A-Xys7dYIzO5","executionInfo":{"status":"ok","timestamp":1654739122903,"user_tz":-540,"elapsed":253,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"6b484aea-3f0d-4ac0-c936-05c61d441044"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["최적의 parameters :  {'C': 10, 'max_iter': 1000}\n"]}]},{"cell_type":"code","source":["logit_clf = LogisticRegression(\n","    random_state = 777,\n","    C = 10,\n","    max_iter = 1000\n",")\n","\n","\n","pred = []\n","for i in range(0,15) :\n","\n","  X_train = X.iloc[0:252+i, :]\n","  Y_train = Y.iloc[0:252+i]\n","\n","  logit_clf.fit(X_train,Y_train)\n","\n","  X_test = X.iloc[252+i,:]\n","  pred.append( int(logit_clf.predict(X_test.array.reshape(1,-1))) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rHe8q2b6IZUf","executionInfo":{"status":"ok","timestamp":1654961128676,"user_tz":-540,"elapsed":6071,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"1f18c3f4-a6d4-4058-c5ab-db65e2107d79"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  \"X does not have valid feature names, but\"\n"]}]},{"cell_type":"code","source":["print(pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ceeWQLkzIb7M","executionInfo":{"status":"ok","timestamp":1654824034860,"user_tz":-540,"elapsed":273,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"45257604-b22e-4531-8a1a-727ac4a7d46a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n"]}]},{"cell_type":"code","source":["# Confusion Matrix\n","\n","Y_test= Y.iloc[252:267]\n","\n","\n","from sklearn.metrics import confusion_matrix\n","confusion_matrix(np.array(Y_test), np.array(pred))\n","\n","tn, fp, fn, tp = confusion_matrix(np.array(Y_test), np.array(pred)).ravel()\n","(tn, fp, fn, tp)\n","\n","# Accuracy\n","accuracy =  (tp+tn)/(tp+tn+fp+fn)\n","print('Accuracy : ', accuracy)\n","\n","# Precision\n","precision = tp/(tp+fp)\n","print('Precision : ', precision)\n","\n","# Recall\n","recall = tp/(tp+fn)\n","print('Recall : ', recall)\n","\n","# TPR\n","tpr = tp / 8\n","print('TPR : ', tpr)\n","\n","# FPR\n","fpr = tn / 4\n","print('FPR : ' , fpr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HybOj5FCIeSS","executionInfo":{"status":"ok","timestamp":1654961128676,"user_tz":-540,"elapsed":12,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"e8ced0d4-2591-4c4f-fc7d-b6ae7deecca2"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy :  0.6666666666666666\n","Precision :  0.6923076923076923\n","Recall :  0.9\n","TPR :  1.125\n","FPR :  0.25\n"]}]},{"cell_type":"code","source":["print('roc auc value {}'.format(roc_auc_score(Y_test,pred)))\n","\n","logit_clf.score(X_train,Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SLvlVaRWIfyt","executionInfo":{"status":"ok","timestamp":1654961131247,"user_tz":-540,"elapsed":4,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"57a8a296-5de6-44f7-bd96-15bd4cd75604"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["roc auc value 0.55\n"]},{"output_type":"execute_result","data":{"text/plain":["0.6729323308270677"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# 변수 중요도\n","\n","from sklearn.model_selection import cross_val_score\n","from sklearn.metrics import confusion_matrix, classification_report\n","\n","logit_fit = logit_clf.fit(X_train, Y_train)\n","cross_val_score(logit_fit, X_train, Y_train, cv=5)\n","\n","\n","feature_importance_lr = pd.DataFrame(zip(X.columns.values, logit_fit.coef_.ravel()))\n","feature_importance_lr.columns = ['feature', 'coef']\n","feature_importance_lr.sort_values(\"coef\", ascending=False, inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W7595uw6BLI2","executionInfo":{"status":"ok","timestamp":1654961135633,"user_tz":-540,"elapsed":1847,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"783cf20d-4112-48a2-a76e-56670efa16e4"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"]}]},{"cell_type":"code","source":["feature_importance_pos = feature_importance_lr[0:10]\n","\n","# 지수 상승할 확률 Rate배 증가 \n","feature_importance_pos['Rate'] = np.exp(feature_importance_pos['coef'])\n","feature_importance_pos\n","\n","del feature_importance_pos['coef']\n","\n","feature_importance_pos"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":473},"id":"UFbB_zerBjKh","executionInfo":{"status":"ok","timestamp":1654961136686,"user_tz":-540,"elapsed":7,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"7278352f-f682-4d73-a181-d8a40b73cc2b"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n"]},{"output_type":"execute_result","data":{"text/plain":["      feature      Rate\n","11     USFIRE  1.001400\n","4     CLF16OV  1.000632\n","28  OILPRICEx  1.000221\n","19   UMCSENTx  1.000088\n","3         HWI  1.000069\n","17    RETAILx  1.000029\n","23      TB3MS  1.000013\n","24       GS10  1.000006\n","30   Positive  1.000003\n","14     AWHMAN  1.000002"],"text/html":["\n","  <div id=\"df-8da24408-6b2e-4457-b0c5-0d383fbfd67b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature</th>\n","      <th>Rate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>11</th>\n","      <td>USFIRE</td>\n","      <td>1.001400</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CLF16OV</td>\n","      <td>1.000632</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>OILPRICEx</td>\n","      <td>1.000221</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>UMCSENTx</td>\n","      <td>1.000088</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>HWI</td>\n","      <td>1.000069</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>RETAILx</td>\n","      <td>1.000029</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>TB3MS</td>\n","      <td>1.000013</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>GS10</td>\n","      <td>1.000006</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>Positive</td>\n","      <td>1.000003</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>AWHMAN</td>\n","      <td>1.000002</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8da24408-6b2e-4457-b0c5-0d383fbfd67b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8da24408-6b2e-4457-b0c5-0d383fbfd67b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8da24408-6b2e-4457-b0c5-0d383fbfd67b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["feature_importance_neg = feature_importance_lr[-10:]\n","\n","# 지수 상승할 확률 Rate배 감소\n","feature_importance_neg['Rate'] = np.exp(feature_importance_neg['coef'])\n","feature_importance_neg\n","\n","del feature_importance_neg['coef']\n","\n","feature_importance_neg"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":473},"id":"_GpdCoWhCFeu","executionInfo":{"status":"ok","timestamp":1654961171948,"user_tz":-540,"elapsed":299,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"3795affd-e930-482e-dc54-9d6754f97f04"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n"]},{"output_type":"execute_result","data":{"text/plain":["          feature      Rate\n","26  TWEXAFEGSMTHx  0.999923\n","0             RPI  0.999798\n","16          HOUST  0.999761\n","9          MANEMP  0.999561\n","7   CES1021000001  0.999525\n","29        VIXCLSx  0.999389\n","20           M2SL  0.999139\n","21         REALLN  0.998828\n","10        USTRADE  0.998145\n","12         USGOVT  0.997060"],"text/html":["\n","  <div id=\"df-ed708e85-3c52-49b1-858a-0b39c4e46e49\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature</th>\n","      <th>Rate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>26</th>\n","      <td>TWEXAFEGSMTHx</td>\n","      <td>0.999923</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>RPI</td>\n","      <td>0.999798</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>HOUST</td>\n","      <td>0.999761</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>MANEMP</td>\n","      <td>0.999561</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>CES1021000001</td>\n","      <td>0.999525</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>VIXCLSx</td>\n","      <td>0.999389</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>M2SL</td>\n","      <td>0.999139</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>REALLN</td>\n","      <td>0.998828</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>USTRADE</td>\n","      <td>0.998145</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>USGOVT</td>\n","      <td>0.997060</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed708e85-3c52-49b1-858a-0b39c4e46e49')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ed708e85-3c52-49b1-858a-0b39c4e46e49 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ed708e85-3c52-49b1-858a-0b39c4e46e49');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["## RandomForest"],"metadata":{"id":"qAKxAygmJB8a"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier"],"metadata":{"id":"vtH_VZfMJD-_","executionInfo":{"status":"ok","timestamp":1654955009022,"user_tz":-540,"elapsed":415,"user":{"displayName":"임경룡","userId":"01521213593003281639"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["# Grid Search\n","\n","\n","\n","np.random.seed(777)\n","\n","#grid_search 이용\n","X_train = X.iloc[0:266,:]\n","Y_train = Y.iloc[0:266]\n","\n","from sklearn.model_selection import GridSearchCV\n","\n","param_grid = { 'n_estimators' : [100, 200,300],\n","           'max_depth' : [3,4,5,6, 8, 10, 12],\n","           'min_samples_leaf' : [5, 7, 10,12],\n","           'min_samples_split' : [3,5,7,10,12] # 작을수록 overfitting\n","            }\n","\n","rf_clf = RandomForestClassifier(random_state = 777, n_jobs = -1)\n","grid_search = GridSearchCV(rf_clf, param_grid, cv=5 , refit=True, n_jobs=-1)\n","\n","grid_search.fit(X_train, Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"esQ3nOR_JHrq","executionInfo":{"status":"error","timestamp":1654824048482,"user_tz":-540,"elapsed":1767,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"a7d45999-b811-4d9c-93b2-8ac408951282"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-e3dc687a044d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0mgrid_search\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrf_clf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mrefit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m \u001b[0mgrid_search\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    889\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 891\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    892\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1390\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1392\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1393\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    849\u001b[0m                     )\n\u001b[1;32m    850\u001b[0m                     for (cand_idx, parameters), (split_idx, (train, test)) in product(\n\u001b[0;32m--> 851\u001b[0;31m                         \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcandidate_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    852\u001b[0m                     )\n\u001b[1;32m    853\u001b[0m                 )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1054\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1055\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1056\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1057\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1058\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    933\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    934\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 935\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    936\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    937\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    540\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    541\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 542\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    543\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mCfTimeoutError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    428\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 430\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_condition\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    431\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mCANCELLED\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCANCELLED_AND_NOTIFIED\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    294\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["print('최적의 parameters : ', grid_search.best_params_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v9_J-DEaJJGc","executionInfo":{"status":"ok","timestamp":1654740807316,"user_tz":-540,"elapsed":582,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"8e7a8830-b1af-4219-a36e-b76ce1cd353c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["최적의 parameters :  {'max_depth': 3, 'min_samples_leaf': 10, 'min_samples_split': 3, 'n_estimators': 300}\n"]}]},{"cell_type":"code","source":["# RandomForest 재적합\n","rf_clf = RandomForestClassifier(\n","    n_estimators=100,\n","    max_depth=5,\n","    min_samples_leaf=10,\n","    min_samples_split=3,\n","    random_state=777,\n","    n_jobs=-1\n",")\n","\n","pred = []\n","for i in range(0,15) :\n","\n","  X_train = X.iloc[0:252+i, :]\n","  Y_train = Y.iloc[0:252+i]\n","\n","  rf_clf.fit(X_train,Y_train)\n","\n","  X_test = X.iloc[252+i,:]\n","  pred.append( int(rf_clf.predict(X_test.array.reshape(1,-1))) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p8TFOncCJO0F","executionInfo":{"status":"ok","timestamp":1654955018058,"user_tz":-540,"elapsed":5378,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"330beed9-f739-4f2a-c158-02d2e9db9677"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n"]}]},{"cell_type":"code","source":["print(pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jn2BleeSJQYT","executionInfo":{"status":"ok","timestamp":1654824061069,"user_tz":-540,"elapsed":4,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"631be956-8aee-4324-8aa7-481e7beb3f1e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0]\n"]}]},{"cell_type":"code","source":["# Confusion Matrix\n","\n","Y_test= Y.iloc[252:267]\n","\n","\n","from sklearn.metrics import confusion_matrix\n","confusion_matrix(np.array(Y_test), np.array(pred))\n","\n","tn, fp, fn, tp = confusion_matrix(np.array(Y_test), np.array(pred)).ravel()\n","(tn, fp, fn, tp)\n","\n","# Accuracy\n","accuracy =  (tp+tn)/(tp+tn+fp+fn)\n","print('Accuracy : ', accuracy)\n","\n","# Precision\n","precision = tp/(tp+fp)\n","print('Precision : ', precision)\n","\n","# Recall\n","recall = tp/(tp+fn)\n","print('Recall : ', recall)\n","\n","# TPR\n","tpr = tp / 8\n","print('TPR : ', tpr)\n","\n","# FPR\n","fpr = tn / 4\n","print('FPR : ' , fpr)\n","\n","print('roc auc value {}'.format(roc_auc_score(Y_test,pred)))\n","\n","rf_clf.score(X_train,Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0T0h3pjkMJP8","executionInfo":{"status":"ok","timestamp":1654824062608,"user_tz":-540,"elapsed":340,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"1cc29781-0ffe-4e32-8ca7-061e8f4f8b2b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy :  0.6666666666666666\n","Precision :  0.6923076923076923\n","Recall :  0.9\n","TPR :  1.125\n","FPR :  0.25\n","roc auc value 0.55\n"]},{"output_type":"execute_result","data":{"text/plain":["0.7481203007518797"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["## ADABoost"],"metadata":{"id":"BXp7GHNaPseG"}},{"cell_type":"code","source":["from sklearn.ensemble import AdaBoostClassifier"],"metadata":{"id":"eDc4D1AZMtZK","executionInfo":{"status":"ok","timestamp":1654953171000,"user_tz":-540,"elapsed":4,"user":{"displayName":"임경룡","userId":"01521213593003281639"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Grid Search\n","\n","np.random.seed(777)\n","\n","#grid_search 이용\n","X_train = X.iloc[0:266,:]\n","Y_train = Y.iloc[0:266]\n","\n","from sklearn.model_selection import GridSearchCV\n","param_grid = { \n","           'learning_rate' : [0.001,0.002,0.003,0.01,0.03,0.1,0.5,1],\n","           'n_estimators' : [100, 200,300],\n","            }\n","\n","ada_clf = AdaBoostClassifier(random_state = 777)\n","grid_search = GridSearchCV(ada_clf, param_grid)\n","grid_search.fit(X_train, Y_train)"],"metadata":{"id":"pw4WHPw2PuoV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('최적의 parameters : ', grid_search.best_params_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9kDa-pzyPuqW","executionInfo":{"status":"ok","timestamp":1654741486064,"user_tz":-540,"elapsed":451,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"2539f601-ce9b-4eda-b7cb-a35b19af28de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["최적의 parameters :  {'learning_rate': 0.001, 'n_estimators': 100}\n"]}]},{"cell_type":"code","source":["#ADABoost 적합\n","\n","\n","ada_clf = AdaBoostClassifier(\n","    learning_rate = 0.001,\n","    n_estimators=100,\n","    random_state=777\n",")\n","\n","pred = []\n","for i in range(0,15) :\n","\n","  X_train = X.iloc[0:252+i, :]\n","  Y_train = Y.iloc[0:252+i]\n","\n","  ada_clf.fit(X_train,Y_train)\n","\n","  X_test = X.iloc[252+i,:]\n","  pred.append( int(ada_clf.predict(X_test.array.reshape(1,-1))) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a1psMgYaPusk","executionInfo":{"status":"ok","timestamp":1654953178372,"user_tz":-540,"elapsed":3178,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"df8ab75f-b845-41ce-86c8-e61018a355f7"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n"]}]},{"cell_type":"code","source":["print(pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OSrZ0j-ePzof","executionInfo":{"status":"ok","timestamp":1654842998304,"user_tz":-540,"elapsed":402,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"2d5c47b7-ad7e-4690-c66d-d6429374a10a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0]\n"]}]},{"cell_type":"code","source":["# Confusion Matrix\n","\n","Y_test= Y.iloc[252:267]\n","\n","\n","from sklearn.metrics import confusion_matrix\n","confusion_matrix(np.array(Y_test), np.array(pred))\n","\n","tn, fp, fn, tp = confusion_matrix(np.array(Y_test), np.array(pred)).ravel()\n","(tn, fp, fn, tp)\n","\n","# Accuracy\n","accuracy =  (tp+tn)/(tp+tn+fp+fn)\n","print('Accuracy : ', accuracy)\n","\n","# Precision\n","precision = tp/(tp+fp)\n","print('Precision : ', precision)\n","\n","# Recall\n","recall = tp/(tp+fn)\n","print('Recall : ', recall)\n","\n","# TPR\n","tpr = tp / 8\n","print('TPR : ', tpr)\n","\n","# FPR\n","fpr = tn / 4\n","print('FPR : ' , fpr)\n","\n","print('roc auc value {}'.format(roc_auc_score(Y_test,pred)))\n","\n","\n","print('training score : ',ada_clf.score(X_train,Y_train))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JbFaM_ZdP1_p","executionInfo":{"status":"ok","timestamp":1654842998819,"user_tz":-540,"elapsed":4,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"3bee9a5d-35be-4096-eecd-7377c9c62b98"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy :  0.6666666666666666\n","Precision :  1.0\n","Recall :  0.5\n","TPR :  0.625\n","FPR :  1.25\n","roc auc value 0.75\n","training score :  0.6691729323308271\n"]}]},{"cell_type":"code","source":["ada_clf.fit(X_train, Y_train)\n"," \n","visualizer = ROCAUC(ada_clf, classes=[0, 1], micro=False, macro=False, per_class=False)\n","visualizer.fit(X_train, Y_train)\n","visualizer.score(X_train, Y_train)\n","visualizer.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":451},"id":"UI4LlSErU8bc","executionInfo":{"status":"ok","timestamp":1654843056992,"user_tz":-540,"elapsed":787,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"04871bee-3ae5-4893-a522-101222794f57"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 576x396 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f3474a61410>"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["# XGBoost"],"metadata":{"id":"RgtyacoVJj0z"}},{"cell_type":"code","source":["from xgboost import XGBClassifier"],"metadata":{"id":"GqeIG3omJnY-","executionInfo":{"status":"ok","timestamp":1654953891630,"user_tz":-540,"elapsed":279,"user":{"displayName":"임경룡","userId":"01521213593003281639"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Grid Search\n","\n","\n","np.random.seed(777)\n","\n","#grid_search 이용\n","X_train = X.iloc[0:266,:]\n","Y_train = Y.iloc[0:266]\n","\n","from sklearn.model_selection import GridSearchCV\n","\n","param_grid = { 'n_estimators' : [100,200,300,500,700,1000],\n","           'max_depth' : [3,4,5,6, 8, 10, 12],\n","           'learning_rate' : [0.001,0.003,0.01,0.03,0.1,0.3],\n","            'objective' : ['binary:logistic'],\n","            'min_child_weight' : [1,3,5,7,10],\n","            'gamma' : [0,1] \n","            }\n","\n","xgb_clf = XGBClassifier(random_state = 777, n_jobs = -1)\n","grid_search = GridSearchCV(xgb_clf, param_grid, cv=5 , refit=True, n_jobs=-1)\n","\n","grid_search.fit(X_train, Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ZpMZP2vKNxn","executionInfo":{"status":"ok","timestamp":1654826914796,"user_tz":-540,"elapsed":1649467,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"0a33095b-609b-40e9-8d22-a17384560396"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=5, estimator=XGBClassifier(n_jobs=-1, random_state=777),\n","             n_jobs=-1,\n","             param_grid={'gamma': [0, 1],\n","                         'learning_rate': [0.001, 0.003, 0.01, 0.03, 0.1, 0.3],\n","                         'max_depth': [3, 4, 5, 6, 8, 10, 12],\n","                         'min_child_weight': [1, 3, 5, 7, 10],\n","                         'n_estimators': [100, 200, 300, 500, 700, 1000],\n","                         'objective': ['binary:logistic']})"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["print('최적의 parameters : ', grid_search.best_params_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CT3KsVCDMIWY","executionInfo":{"status":"ok","timestamp":1654827016674,"user_tz":-540,"elapsed":304,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"6218cd06-af24-4336-dcbe-23f908d84dd3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["최적의 parameters :  {'gamma': 0, 'learning_rate': 0.001, 'max_depth': 3, 'min_child_weight': 10, 'n_estimators': 200, 'objective': 'binary:logistic'}\n"]}]},{"cell_type":"code","source":["xgb_clf = XGBClassifier(\n","    gamma = 0,\n","    learning_rate = 0.001,\n","    max_depth = 8,\n","    min_child_weight = 10,\n","    n_estimators = 200,\n","    objective = 'binary:logistic',\n","    random_state = 777\n",")\n","\n","\n","pred = []\n","for i in range(0,15) :\n","\n","  X_train = X.iloc[0:252+i, :].values\n","  Y_train = Y.iloc[0:252+i].values\n","\n","  xgb_clf.fit(X_train,Y_train)\n","\n","  X_test = X.iloc[252+i,:].to_numpy()\n","  pred.append( int(xgb_clf.predict(np.array(X_test).reshape((1,-1)))))"],"metadata":{"id":"6J5lxAxsJrJZ","executionInfo":{"status":"ok","timestamp":1654953897840,"user_tz":-540,"elapsed":2519,"user":{"displayName":"임경룡","userId":"01521213593003281639"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["print(pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i-75775RM9Jg","executionInfo":{"status":"ok","timestamp":1654953900155,"user_tz":-540,"elapsed":282,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"1796538d-fbae-46c2-b645-f582090798a9"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0]\n"]}]},{"cell_type":"code","source":["# Confusion Matrix\n","\n","Y_test= Y.iloc[252:267]\n","\n","\n","from sklearn.metrics import confusion_matrix\n","confusion_matrix(np.array(Y_test), np.array(pred))\n","\n","tn, fp, fn, tp = confusion_matrix(np.array(Y_test), np.array(pred)).ravel()\n","(tn, fp, fn, tp)\n","\n","# Accuracy\n","accuracy =  (tp+tn)/(tp+tn+fp+fn)\n","print('Accuracy : ', accuracy)\n","\n","# Precision\n","precision = tp/(tp+fp)\n","print('Precision : ', precision)\n","\n","# Recall\n","recall = tp/(tp+fn)\n","print('Recall : ', recall)\n","\n","# TPR\n","tpr = tp / 8\n","print('TPR : ', tpr)\n","\n","# FPR\n","fpr = tn / 4\n","print('FPR : ' , fpr)\n","\n","print('roc auc value {}'.format(roc_auc_score(Y_test,pred)))\n","\n","print('training score : ',xgb_clf.score(X_train,Y_train))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XYlIZfSxQURW","executionInfo":{"status":"ok","timestamp":1654953907889,"user_tz":-540,"elapsed":292,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"bde6dc38-0dd5-4844-f13a-187de5e6b2dd"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy :  0.7333333333333333\n","Precision :  1.0\n","Recall :  0.6\n","TPR :  0.75\n","FPR :  1.25\n","roc auc value 0.8\n","training score :  0.7218045112781954\n"]}]},{"cell_type":"markdown","source":["## 변수중요도"],"metadata":{"id":"aFBlIq5Iupzh"}},{"cell_type":"code","source":["importance = xgb_clf.feature_importances_\n","\n","feature_importance = pd.DataFrame()\n","\n","feature_importance['feature'] = X.columns\n","\n","feature_importance['rate'] = importance\n","\n","feature_importance = feature_importance.sort_values(by=['rate','feature'],ascending=False)\n","\n","feature_importance_top = feature_importance.head(11).sort_values(by=\"rate\", ascending=True)\n","\n","# 차트 생성 \n","\n","fig = plt.figure(figsize=(10,10)) ## Figure 생성 \n","fig.set_facecolor('white') ## Figure 배경색 지정\n"," \n","colors = sns.color_palette('Blues', len(feature_importance_top['feature'])) ## 바 차트 색상\n"," \n","xtick_label_position = feature_importance_top['feature'] ## x축 눈금 라벨이 표시될 x좌표\n","\n","plt.barh( xtick_label_position, feature_importance_top['rate'], color=colors) ## 바차트 출력\n","plt.title('Feature Importance (XGBoost)', fontsize=20)\n","\n","plt.show\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":630},"id":"idNvPZ5K6YKE","executionInfo":{"status":"ok","timestamp":1654953925525,"user_tz":-540,"elapsed":728,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"516fbc72-0bfc-4d7d-903a-e4a714c848b1"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show>"]},"metadata":{},"execution_count":12},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 1 Axes>"],"image/png":"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ER0+fFh16tQxLwG3bt1aSUlJOZ77d/z4ccXFxcnb21vu7u63PVf2cuD19S5btqwkyyXRtLQ0TZ061bw0mJcZ2WxVqlRR9erVtWPHDotjX716VaGhoXrrrbdUpEgRPfbYY/Ly8tLBgwf1448/Whxj9+7datq0qebPn3/Lc2Uv8+b2j4WsrCyNGTNGSUlJmj59unkWUZIGDx6sWrVq6aOPPlJCQoK53d7eXm+++aYyMzM1ZMgQnThxItfznjhxQrNmzZKUt9sNzpw5o+3bt6tUqVLy8PCQJPOHO6Kjoy36pqena8WKFXJxcdGzzz4rSWrVqpWka/dZXv8PMZPJpC+//FKS1LJlS0lSWFiYOnTokON3rGjRorK3t7eYhcztd/H6a5VyvwcUuFssEwOFQPfu3bVmzRqtWbNGaWlpeu6553T58mUtX75c+/bt09SpU81B44UXXtDPP/+sV155RT169FBSUpI+++wzdevWTfb29tq1a5fmz58vf39/VatWTZUqVdLvv/+u8PBwPfzww+rcubP8/f21atUqjR8/Xi+99JKcnJy0ceNGlSxZMtcPUdzMmDFj9Msvv2jy5Mk6evSovLy8dPr0aUVFRcnOzi7XDw/cb//++6+GDh2qZ555RlevXtWiRYskSS+//LK5z5AhQ7Rp0yaFhobq4MGDqlGjhv744w99/vnncnR0VFhY2B2dK/tDJe+9956efPJJdejQQW3atNHKlSsVGhqqfv366erVq/r6669Vv359lSpVSrGxsZo9e7YCAgJUu3btPF3bxIkTNWDAAAUHByskJERFihRRbGysDhw4oNDQUPP9bW+++aZCQkI0bNgw9enTR48++qiOHj2qqKgolSlTRu3atbvlecqUKSMPDw/FxcXJZDJZ3GP4ySef6KefflLfvn1zfJDIyclJ77zzjl588UWNGTNGMTEx5jE99dRTmjlzpt544w0FBASoTZs2atCggYoVK6bz589r586d5geu9+/fP9eHXR86dMjiAdupqak6ceKEli9fruTkZL333nvmMObv7y8/Pz999dVXSktLk6+vr5KTk7V27VodPXpUb7zxhnlWrnbt2urZs6c+++wzDR48WC1atNDVq1e1efNm/fTTT+rTp485ZDZu3FhffvmlunXrpo4dO6ps2bL6559/tGrVKqWlpalXr17m8VWqVEk7duzQtGnT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\n"},"metadata":{}}]},{"cell_type":"code","source":["feature_importance_pos"],"metadata":{"id":"4Li7M7I-CAMo","colab":{"base_uri":"https://localhost:8080/","height":363},"executionInfo":{"status":"ok","timestamp":1654955905163,"user_tz":-540,"elapsed":294,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"57368329-0943-4a1c-eb54-f3666cf8509e"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      feature      coef      Rate\n","11     USFIRE  0.001399  1.001400\n","4     CLF16OV  0.000632  1.000632\n","28  OILPRICEx  0.000221  1.000221\n","19   UMCSENTx  0.000088  1.000088\n","3         HWI  0.000069  1.000069\n","17    RETAILx  0.000029  1.000029\n","23      TB3MS  0.000013  1.000013\n","24       GS10  0.000006  1.000006\n","30   Positive  0.000003  1.000003\n","14     AWHMAN  0.000002  1.000002"],"text/html":["\n","  <div id=\"df-b502d0c2-c726-4a2c-a0ae-11724e7f2fe1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature</th>\n","      <th>coef</th>\n","      <th>Rate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>11</th>\n","      <td>USFIRE</td>\n","      <td>0.001399</td>\n","      <td>1.001400</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CLF16OV</td>\n","      <td>0.000632</td>\n","      <td>1.000632</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>OILPRICEx</td>\n","      <td>0.000221</td>\n","      <td>1.000221</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>UMCSENTx</td>\n","      <td>0.000088</td>\n","      <td>1.000088</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>HWI</td>\n","      <td>0.000069</td>\n","      <td>1.000069</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>RETAILx</td>\n","      <td>0.000029</td>\n","      <td>1.000029</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>TB3MS</td>\n","      <td>0.000013</td>\n","      <td>1.000013</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>GS10</td>\n","      <td>0.000006</td>\n","      <td>1.000006</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>Positive</td>\n","      <td>0.000003</td>\n","      <td>1.000003</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>AWHMAN</td>\n","      <td>0.000002</td>\n","      <td>1.000002</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b502d0c2-c726-4a2c-a0ae-11724e7f2fe1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b502d0c2-c726-4a2c-a0ae-11724e7f2fe1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b502d0c2-c726-4a2c-a0ae-11724e7f2fe1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["feature_importance_neg"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"BQUjiyKBKcm4","executionInfo":{"status":"ok","timestamp":1654957664970,"user_tz":-540,"elapsed":392,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"692867a2-e7e2-4132-9cd5-d1e58a9fc5e3"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          feature      coef      Rate\n","26  TWEXAFEGSMTHx -0.000077  0.000077\n","0             RPI -0.000202  0.000202\n","16          HOUST -0.000239  0.000239\n","9          MANEMP -0.000439  0.000439\n","7   CES1021000001 -0.000475  0.000475\n","29        VIXCLSx -0.000611  0.000611\n","20           M2SL -0.000862  0.000861\n","21         REALLN -0.001173  0.001172\n","10        USTRADE -0.001856  0.001855\n","12         USGOVT -0.002944  0.002940"],"text/html":["\n","  <div id=\"df-2042419f-439a-42c3-beaf-eb9f794bf4f9\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature</th>\n","      <th>coef</th>\n","      <th>Rate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>26</th>\n","      <td>TWEXAFEGSMTHx</td>\n","      <td>-0.000077</td>\n","      <td>0.000077</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>RPI</td>\n","      <td>-0.000202</td>\n","      <td>0.000202</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>HOUST</td>\n","      <td>-0.000239</td>\n","      <td>0.000239</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>MANEMP</td>\n","      <td>-0.000439</td>\n","      <td>0.000439</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>CES1021000001</td>\n","      <td>-0.000475</td>\n","      <td>0.000475</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>VIXCLSx</td>\n","      <td>-0.000611</td>\n","      <td>0.000611</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>M2SL</td>\n","      <td>-0.000862</td>\n","      <td>0.000861</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>REALLN</td>\n","      <td>-0.001173</td>\n","      <td>0.001172</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>USTRADE</td>\n","      <td>-0.001856</td>\n","      <td>0.001855</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>USGOVT</td>\n","      <td>-0.002944</td>\n","      <td>0.002940</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2042419f-439a-42c3-beaf-eb9f794bf4f9')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2042419f-439a-42c3-beaf-eb9f794bf4f9 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2042419f-439a-42c3-beaf-eb9f794bf4f9');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":48}]},{"cell_type":"markdown","source":["## ROC Curve"],"metadata":{"id":"6Wu7HSZOkl_H"}},{"cell_type":"code","source":["xgb_clf.fit(X_train, Y_train)\n"," \n","visualizer = ROCAUC(xgb_clf, classes=[0, 1], micro=False, macro=False, per_class=False)\n","visualizer.fit(X_train, Y_train)\n","visualizer.score(X_train, Y_train)\n","visualizer.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"t1F0PIwOdtSk","executionInfo":{"status":"ok","timestamp":1654829009253,"user_tz":-540,"elapsed":943,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"ee8a443c-5043-4f60-88b1-8d83a57da997"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 576x396 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd4003e6dd0>"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["X =  pd.read_csv('/content/drive/My Drive/finbert/FRED.csv')\n","\n","Y = pd.read_csv('/content/drive/My Drive/finbert/S&P500.csv')\n","\n"],"metadata":{"id":"ButCH2Ivi1Pl","executionInfo":{"status":"ok","timestamp":1655081552686,"user_tz":-540,"elapsed":847,"user":{"displayName":"임경룡","userId":"01521213593003281639"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"Xg95H7K0jETL","executionInfo":{"status":"ok","timestamp":1655081562327,"user_tz":-540,"elapsed":488,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"49e3651a-63be-4095-c516-3d0b2823b317"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           Date         High          Low         Open        Close  \\\n","0    2000-01-01  1478.000000  1350.140015  1469.250000  1394.459961   \n","1    2000-02-01  1444.550049  1325.069946  1394.459961  1366.420044   \n","2    2000-03-01  1552.869995  1346.619995  1366.420044  1498.579956   \n","3    2000-04-01  1527.189941  1339.400024  1498.579956  1452.430054   \n","4    2000-05-01  1481.510010  1361.089966  1452.430054  1420.599976   \n","..          ...          ...          ...          ...          ...   \n","262  2021-11-01  4743.830078  4560.000000  4610.620117  4567.000000   \n","263  2021-12-01  4808.930176  4495.120117  4602.819824  4766.180176   \n","264  2022-01-01  4818.620117  4222.620117  4778.140137  4515.549805   \n","265  2022-02-01  4595.310059  4114.649902  4519.569824  4373.939941   \n","266  2022-03-01  4637.299805  4157.870117  4363.140137  4530.410156   \n","\n","           Volume    Adj Close  Result  \n","0    2.149440e+10  1394.459961       0  \n","1    2.091200e+10  1366.420044       0  \n","2    2.615620e+10  1498.579956       1  \n","3    2.010646e+10  1452.430054       0  \n","4    1.989830e+10  1420.599976       0  \n","..            ...          ...     ...  \n","262  6.752080e+10  4567.000000       0  \n","263  6.869983e+10  4766.180176       1  \n","264  7.327944e+10  4515.549805       0  \n","265  7.316779e+10  4373.939941       0  \n","266  1.010000e+11  4530.410156       1  \n","\n","[267 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-f162eb54-d195-44ce-adf8-1f31fb455546\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Open</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Adj Close</th>\n","      <th>Result</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2000-01-01</td>\n","      <td>1478.000000</td>\n","      <td>1350.140015</td>\n","      <td>1469.250000</td>\n","      <td>1394.459961</td>\n","      <td>2.149440e+10</td>\n","      <td>1394.459961</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2000-02-01</td>\n","      <td>1444.550049</td>\n","      <td>1325.069946</td>\n","      <td>1394.459961</td>\n","      <td>1366.420044</td>\n","      <td>2.091200e+10</td>\n","      <td>1366.420044</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2000-03-01</td>\n","      <td>1552.869995</td>\n","      <td>1346.619995</td>\n","      <td>1366.420044</td>\n","      <td>1498.579956</td>\n","      <td>2.615620e+10</td>\n","      <td>1498.579956</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2000-04-01</td>\n","      <td>1527.189941</td>\n","      <td>1339.400024</td>\n","      <td>1498.579956</td>\n","      <td>1452.430054</td>\n","      <td>2.010646e+10</td>\n","      <td>1452.430054</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2000-05-01</td>\n","      <td>1481.510010</td>\n","      <td>1361.089966</td>\n","      <td>1452.430054</td>\n","      <td>1420.599976</td>\n","      <td>1.989830e+10</td>\n","      <td>1420.599976</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>262</th>\n","      <td>2021-11-01</td>\n","      <td>4743.830078</td>\n","      <td>4560.000000</td>\n","      <td>4610.620117</td>\n","      <td>4567.000000</td>\n","      <td>6.752080e+10</td>\n","      <td>4567.000000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>263</th>\n","      <td>2021-12-01</td>\n","      <td>4808.930176</td>\n","      <td>4495.120117</td>\n","      <td>4602.819824</td>\n","      <td>4766.180176</td>\n","      <td>6.869983e+10</td>\n","      <td>4766.180176</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>264</th>\n","      <td>2022-01-01</td>\n","      <td>4818.620117</td>\n","      <td>4222.620117</td>\n","      <td>4778.140137</td>\n","      <td>4515.549805</td>\n","      <td>7.327944e+10</td>\n","      <td>4515.549805</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>265</th>\n","      <td>2022-02-01</td>\n","      <td>4595.310059</td>\n","      <td>4114.649902</td>\n","      <td>4519.569824</td>\n","      <td>4373.939941</td>\n","      <td>7.316779e+10</td>\n","      <td>4373.939941</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>266</th>\n","      <td>2022-03-01</td>\n","      <td>4637.299805</td>\n","      <td>4157.870117</td>\n","      <td>4363.140137</td>\n","      <td>4530.410156</td>\n","      <td>1.010000e+11</td>\n","      <td>4530.410156</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>267 rows × 8 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f162eb54-d195-44ce-adf8-1f31fb455546')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f162eb54-d195-44ce-adf8-1f31fb455546 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f162eb54-d195-44ce-adf8-1f31fb455546');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["fig = plt.figure(figsize=(80,30)) ## 캔버스 생성\n","\n","# Line Graph by matplotlib with wide-form DataFrame\n","\n","sns.set_style(\"white\")\n","\n","line=sns.lineplot(x=\"Date\", y=\"Adj Close\",data=Y.iloc[251:267,:],\n","                  marker='s',linewidth=10, markersize=25\n","                  )\n","\n","line.set_title(\"S&P 500 Adj Close\", size = 70)\n","\n","sns.set(font_scale= 4)\n","\n","line.set(ylabel = None)\n","\n","\n","sns.despine()\n","\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":720},"id":"4eielRKijGrW","executionInfo":{"status":"ok","timestamp":1655086082988,"user_tz":-540,"elapsed":2211,"user":{"displayName":"임경룡","userId":"01521213593003281639"}},"outputId":"5c9b754d-32a0-4eca-891e-2c5b4834c8e7"},"execution_count":106,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 5760x2160 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[""],"metadata":{"id":"yJX3joEikKnH"},"execution_count":null,"outputs":[]}]}